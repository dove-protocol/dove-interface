// Generated by @wagmi/cli@1.0.0 on 5/9/2023 at 10:22:49â€¯PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Mock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20MockABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
      { name: 'decimals_', internalType: 'uint8', type: 'uint8' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// L1Router
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const l1RouterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_factory', internalType: 'address', type: 'address' }],
  },
  { type: 'error', inputs: [], name: 'BelowMinimumAmount' },
  { type: 'error', inputs: [], name: 'CodeLength' },
  { type: 'error', inputs: [], name: 'Expired' },
  { type: 'error', inputs: [], name: 'IdenticalAddress' },
  { type: 'error', inputs: [], name: 'InsuffcientAmountForQuote' },
  { type: 'error', inputs: [], name: 'InsufficientAmountA' },
  { type: 'error', inputs: [], name: 'InsufficientAmountB' },
  { type: 'error', inputs: [], name: 'InsufficientLiquidity' },
  { type: 'error', inputs: [], name: 'PairDoesNotExist' },
  { type: 'error', inputs: [], name: 'TransferFailed' },
  { type: 'error', inputs: [], name: 'TransferLiqToPairFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'amountADesired', internalType: 'uint256', type: 'uint256' },
      { name: 'amountBDesired', internalType: 'uint256', type: 'uint256' },
      { name: 'amountAMin', internalType: 'uint256', type: 'uint256' },
      { name: 'amountBMin', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addLiquidity',
    outputs: [
      { name: 'amountA', internalType: 'uint256', type: 'uint256' },
      { name: 'amountB', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
    ],
    name: 'getReserves',
    outputs: [
      { name: 'reserveA', internalType: 'uint256', type: 'uint256' },
      { name: 'reserveB', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pair', internalType: 'address', type: 'address' }],
    name: 'isPair',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
    ],
    name: 'pairFor',
    outputs: [{ name: 'pair', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'amountADesired', internalType: 'uint256', type: 'uint256' },
      { name: 'amountBDesired', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteAddLiquidity',
    outputs: [
      { name: 'amountA', internalType: 'uint256', type: 'uint256' },
      { name: 'amountB', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'quoteRemoveLiquidity',
    outputs: [
      { name: 'amountA', internalType: 'uint256', type: 'uint256' },
      { name: 'amountB', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'amountAMin', internalType: 'uint256', type: 'uint256' },
      { name: 'amountBMin', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeLiquidity',
    outputs: [
      { name: 'amountA', internalType: 'uint256', type: 'uint256' },
      { name: 'amountB', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'amountAMin', internalType: 'uint256', type: 'uint256' },
      { name: 'amountBMin', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'approveMax', internalType: 'bool', type: 'bool' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'removeLiquidityWithPermit',
    outputs: [
      { name: 'amountA', internalType: 'uint256', type: 'uint256' },
      { name: 'amountB', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
    ],
    name: 'sortTokens',
    outputs: [
      { name: 'token0', internalType: 'address', type: 'address' },
      { name: 'token1', internalType: 'address', type: 'address' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// L2Router
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const l2RouterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_factory', internalType: 'address', type: 'address' }],
  },
  { type: 'error', inputs: [], name: 'CodeLength' },
  { type: 'error', inputs: [], name: 'Expired' },
  { type: 'error', inputs: [], name: 'IdenticalAddress' },
  { type: 'error', inputs: [], name: 'InsufficientOutputAmount' },
  { type: 'error', inputs: [], name: 'InvalidPath' },
  { type: 'error', inputs: [], name: 'TransferFailed' },
  { type: 'error', inputs: [], name: 'ZeroAddress' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [
      { name: '', internalType: 'contract L2Factory', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenIn', internalType: 'address', type: 'address' },
      { name: 'tokenOut', internalType: 'address', type: 'address' },
    ],
    name: 'getAmountOut',
    outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      {
        name: 'routes',
        internalType: 'struct IL2Router.route[]',
        type: 'tuple[]',
        components: [
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
        ],
      },
    ],
    name: 'getAmountsOut',
    outputs: [
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'pair', internalType: 'address', type: 'address' }],
    name: 'isPair',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
    ],
    name: 'sortTokens',
    outputs: [
      { name: 'token0', internalType: 'address', type: 'address' },
      { name: 'token1', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'amountOutMin', internalType: 'uint256', type: 'uint256' },
      {
        name: 'routes',
        internalType: 'struct IL2Router.route[]',
        type: 'tuple[]',
        components: [
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
        ],
      },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swapExactTokensForTokens',
    outputs: [
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'amountOutMin', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenFrom', internalType: 'address', type: 'address' },
      { name: 'tokenTo', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'swapExactTokensForTokensSimple',
    outputs: [
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dove
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const doveABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_token0', internalType: 'address', type: 'address' },
      { name: '_token1', internalType: 'address', type: 'address' },
      { name: '_hyperlaneGasMaster', internalType: 'address', type: 'address' },
      { name: '_mailbox', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'InsufficientLiquidityBurned' },
  { type: 'error', inputs: [], name: 'InsufficientLiquidityMinted' },
  { type: 'error', inputs: [], name: 'LiquidityLocked' },
  { type: 'error', inputs: [], name: 'NoStargateSwaps' },
  { type: 'error', inputs: [], name: 'NotStargate' },
  { type: 'error', inputs: [], name: 'NotTrusted' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'srcChainId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'syncID',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Bridged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Burn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'srcDomain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BurnClaimCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'srcDomain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BurnClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Claim',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'srcDomain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Fees',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'FeesTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FeesUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Mint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'srcDomain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'syncID',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: 'pairBalance0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'pairBalance1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'earmarkedAmount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'earmarkedAmount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SyncFinalized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'srcDomain',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'syncID',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
    ],
    name: 'SyncPending',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'reserve0',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'reserve1',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'Updated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'chainId', internalType: 'uint16', type: 'uint16' },
      { name: 'remote', internalType: 'address', type: 'address' },
      { name: 'local', internalType: 'address', type: 'address' },
    ],
    name: 'addStargateTrustedBridge',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'origin', internalType: 'uint32', type: 'uint32' },
      { name: 'sender', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'addTrustedRemote',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'burn',
    outputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint32', type: 'uint32' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'burnClaims',
    outputs: [
      { name: 'amount0', internalType: 'uint128', type: 'uint128' },
      { name: 'amount1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'srcDomain', internalType: 'uint32', type: 'uint32' },
      { name: 'user', internalType: 'address', type: 'address' },
    ],
    name: 'claimBurn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'recipient', internalType: 'address', type: 'address' }],
    name: 'claimFeesFor',
    outputs: [
      { name: 'claimed0', internalType: 'uint256', type: 'uint256' },
      { name: 'claimed1', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'claimable0',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'claimable1',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [
      { name: '', internalType: 'contract IL1Factory', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feesDistributor',
    outputs: [{ name: '', internalType: 'contract Fountain', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'originDomain', internalType: 'uint32', type: 'uint32' },
      { name: 'syncID', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'finalizeSyncFromL2',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fountain',
    outputs: [{ name: '', internalType: 'contract Fountain', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getReserves',
    outputs: [
      { name: '', internalType: 'uint128', type: 'uint128' },
      { name: '', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'origin', internalType: 'uint32', type: 'uint32' },
      { name: 'sender', internalType: 'bytes32', type: 'bytes32' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'handle',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'hyperlaneGasMaster',
    outputs: [
      {
        name: '',
        internalType: 'contract IInterchainGasPaymaster',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'index0',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'index1',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isLiquidityLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mailbox',
    outputs: [{ name: '', internalType: 'contract IMailbox', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    name: 'marked',
    outputs: [
      { name: 'marked0', internalType: 'uint128', type: 'uint128' },
      { name: 'marked1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'mint',
    outputs: [{ name: 'liquidity', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve0',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve1',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_hyperlaneGasMaster', internalType: 'address', type: 'address' },
    ],
    name: 'setHyperlaneGasMaster',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_mailbox', internalType: 'address', type: 'address' }],
    name: 'setMailbox',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_srcChainId', internalType: 'uint16', type: 'uint16' },
      { name: '_srcAddress', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_bridgedAmount', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'sgReceive',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    name: 'sgTrustedBridge',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'supplyIndex0',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'supplyIndex1',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'sync',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'destinationDomain', internalType: 'uint32', type: 'uint32' },
      { name: 'pair', internalType: 'address', type: 'address' },
    ],
    name: 'syncL2',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint32', type: 'uint32' },
      { name: '', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'syncs',
    outputs: [
      {
        name: 'pSyncA',
        internalType: 'struct Codec.PartialSync',
        type: 'tuple',
        components: [
          { name: 'token', internalType: 'address', type: 'address' },
          { name: 'tokensForDove', internalType: 'uint128', type: 'uint128' },
          { name: 'earmarkedAmount', internalType: 'uint128', type: 'uint128' },
          { name: 'pairBalance', internalType: 'uint128', type: 'uint128' },
        ],
      },
      {
        name: 'pSyncB',
        internalType: 'struct Codec.PartialSync',
        type: 'tuple',
        components: [
          { name: 'token', internalType: 'address', type: 'address' },
          { name: 'tokensForDove', internalType: 'uint128', type: 'uint128' },
          { name: 'earmarkedAmount', internalType: 'uint128', type: 'uint128' },
          { name: 'pairBalance', internalType: 'uint128', type: 'uint128' },
        ],
      },
      {
        name: 'sm',
        internalType: 'struct Codec.SyncerMetadata',
        type: 'tuple',
        components: [
          { name: 'syncerPercentage', internalType: 'uint64', type: 'uint64' },
          { name: 'syncer', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    name: 'trustedRemoteLookup',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pair
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pairABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_token0', internalType: 'address', type: 'address' },
      { name: '_L1Token0', internalType: 'address', type: 'address' },
      { name: '_token1', internalType: 'address', type: 'address' },
      { name: '_L1Token1', internalType: 'address', type: 'address' },
      {
        name: '_sgConfig',
        internalType: 'struct IL2Factory.SGConfig',
        type: 'tuple',
        components: [
          { name: 'srcPoolId0', internalType: 'uint16', type: 'uint16' },
          { name: 'srcPoolId1', internalType: 'uint16', type: 'uint16' },
          { name: 'dstPoolId0', internalType: 'uint16', type: 'uint16' },
          { name: 'dstPoolId1', internalType: 'uint16', type: 'uint16' },
        ],
      },
      { name: '_gasMaster', internalType: 'address', type: 'address' },
      { name: '_mailbox', internalType: 'address', type: 'address' },
      { name: '_L1Target', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'InsufficientInputAmount' },
  { type: 'error', inputs: [], name: 'InsufficientLiquidity' },
  { type: 'error', inputs: [], name: 'InsufficientOutputAmount' },
  { type: 'error', inputs: [], name: 'InvalidTo' },
  { type: 'error', inputs: [], name: 'MsgValueTooLow' },
  { type: 'error', inputs: [], name: 'NoVouchers' },
  { type: 'error', inputs: [], name: 'NotDove' },
  { type: 'error', inputs: [], name: 'WrongOrigin' },
  { type: 'error', inputs: [], name: 'kInvariant' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'user', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount0Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'reserve0',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'reserve1',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'Sync',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'fees1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SyncToL1Initiated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'reserve0',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'reserve1',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'SyncedFromL1',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VouchersBurnInitiated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VouchersYeeted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'L1Target',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'L1Token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'L1Token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'balance0',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'balance1',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'blockTimestampLast',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnVouchers',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentCumulativePrices',
    outputs: [
      { name: 'reserve0Cumulative', internalType: 'uint256', type: 'uint256' },
      { name: 'reserve1Cumulative', internalType: 'uint256', type: 'uint256' },
      { name: 'blockTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [
      { name: '', internalType: 'contract IL2Factory', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feesAccumulator',
    outputs: [
      { name: '', internalType: 'contract FeesAccumulator', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenIn', internalType: 'address', type: 'address' },
    ],
    name: 'getAmountOut',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getReserves',
    outputs: [
      { name: '_reserve0', internalType: 'uint128', type: 'uint128' },
      { name: '_reserve1', internalType: 'uint128', type: 'uint128' },
      { name: '_blockTimestampLast', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSyncerPercentage',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'origin', internalType: 'uint32', type: 'uint32' },
      { name: 'sender', internalType: 'bytes32', type: 'bytes32' },
      { name: 'payload', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'handle',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'hyperlaneGasMaster',
    outputs: [
      {
        name: '',
        internalType: 'contract IInterchainGasPaymaster',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'mailbox',
    outputs: [{ name: '', internalType: 'contract IMailbox', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve0',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve0CumulativeLast',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve1',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve1CumulativeLast',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_hyperlaneGasMaster', internalType: 'address', type: 'address' },
    ],
    name: 'setHyperlaneGasMaster',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_mailbox', internalType: 'address', type: 'address' }],
    name: 'setMailbox',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount0Out', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1Out', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'sync',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'sgFee', internalType: 'uint256', type: 'uint256' },
      { name: 'hyperlaneFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'syncToL1',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'voucher0',
    outputs: [{ name: '', internalType: 'contract Voucher', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'voucher1',
    outputs: [{ name: '', internalType: 'contract Voucher', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'yeetVouchers',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'approve', TMode>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transfer', TMode>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, 'transferFrom', TMode>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function useErc20MockRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20MockDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20MockAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20MockBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20MockDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"name"`.
 */
export function useErc20MockName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20MockNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20MockSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20MockTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function useErc20MockWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20MockABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, TFunctionName, TMode>({
    abi: erc20MockABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20MockApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20MockABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'approve', TMode>({
    abi: erc20MockABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"mint"`.
 */
export function useErc20MockMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof erc20MockABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'mint', TMode>({
    abi: erc20MockABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20MockPermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'permit'
        >['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof erc20MockABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'permit', TMode>({
    abi: erc20MockABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20MockTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20MockABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'transfer', TMode>({
    abi: erc20MockABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20MockTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20MockABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'transferFrom', TMode>({
    abi: erc20MockABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function usePrepareErc20MockWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20MockApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareErc20MockMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20MockPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20MockTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20MockTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function useErc20MockEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20MockABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20MockABI,
    ...config,
  } as UseContractEventConfig<typeof erc20MockABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20MockABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20MockApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20MockABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20MockABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20MockABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20MockABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20MockTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20MockABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20MockABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20MockABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l1RouterABI}__.
 */
export function useL1RouterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof l1RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: l1RouterABI,
    ...config,
  } as UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l1RouterABI}__ and `functionName` set to `"factory"`.
 */
export function useL1RouterFactory<
  TFunctionName extends 'factory',
  TSelectData = ReadContractResult<typeof l1RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: l1RouterABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l1RouterABI}__ and `functionName` set to `"getReserves"`.
 */
export function useL1RouterGetReserves<
  TFunctionName extends 'getReserves',
  TSelectData = ReadContractResult<typeof l1RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: l1RouterABI,
    functionName: 'getReserves',
    ...config,
  } as UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l1RouterABI}__ and `functionName` set to `"isPair"`.
 */
export function useL1RouterIsPair<
  TFunctionName extends 'isPair',
  TSelectData = ReadContractResult<typeof l1RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: l1RouterABI,
    functionName: 'isPair',
    ...config,
  } as UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l1RouterABI}__ and `functionName` set to `"pairFor"`.
 */
export function useL1RouterPairFor<
  TFunctionName extends 'pairFor',
  TSelectData = ReadContractResult<typeof l1RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: l1RouterABI,
    functionName: 'pairFor',
    ...config,
  } as UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l1RouterABI}__ and `functionName` set to `"quoteAddLiquidity"`.
 */
export function useL1RouterQuoteAddLiquidity<
  TFunctionName extends 'quoteAddLiquidity',
  TSelectData = ReadContractResult<typeof l1RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: l1RouterABI,
    functionName: 'quoteAddLiquidity',
    ...config,
  } as UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l1RouterABI}__ and `functionName` set to `"quoteRemoveLiquidity"`.
 */
export function useL1RouterQuoteRemoveLiquidity<
  TFunctionName extends 'quoteRemoveLiquidity',
  TSelectData = ReadContractResult<typeof l1RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: l1RouterABI,
    functionName: 'quoteRemoveLiquidity',
    ...config,
  } as UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l1RouterABI}__ and `functionName` set to `"sortTokens"`.
 */
export function useL1RouterSortTokens<
  TFunctionName extends 'sortTokens',
  TSelectData = ReadContractResult<typeof l1RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: l1RouterABI,
    functionName: 'sortTokens',
    ...config,
  } as UseContractReadConfig<typeof l1RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link l1RouterABI}__.
 */
export function useL1RouterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof l1RouterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof l1RouterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof l1RouterABI, TFunctionName, TMode>({
    abi: l1RouterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link l1RouterABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function useL1RouterAddLiquidity<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof l1RouterABI,
          'addLiquidity'
        >['request']['abi'],
        'addLiquidity',
        TMode
      > & { functionName?: 'addLiquidity' }
    : UseContractWriteConfig<typeof l1RouterABI, 'addLiquidity', TMode> & {
        abi?: never
        functionName?: 'addLiquidity'
      } = {} as any,
) {
  return useContractWrite<typeof l1RouterABI, 'addLiquidity', TMode>({
    abi: l1RouterABI,
    functionName: 'addLiquidity',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link l1RouterABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function useL1RouterRemoveLiquidity<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof l1RouterABI,
          'removeLiquidity'
        >['request']['abi'],
        'removeLiquidity',
        TMode
      > & { functionName?: 'removeLiquidity' }
    : UseContractWriteConfig<typeof l1RouterABI, 'removeLiquidity', TMode> & {
        abi?: never
        functionName?: 'removeLiquidity'
      } = {} as any,
) {
  return useContractWrite<typeof l1RouterABI, 'removeLiquidity', TMode>({
    abi: l1RouterABI,
    functionName: 'removeLiquidity',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link l1RouterABI}__ and `functionName` set to `"removeLiquidityWithPermit"`.
 */
export function useL1RouterRemoveLiquidityWithPermit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof l1RouterABI,
          'removeLiquidityWithPermit'
        >['request']['abi'],
        'removeLiquidityWithPermit',
        TMode
      > & { functionName?: 'removeLiquidityWithPermit' }
    : UseContractWriteConfig<
        typeof l1RouterABI,
        'removeLiquidityWithPermit',
        TMode
      > & {
        abi?: never
        functionName?: 'removeLiquidityWithPermit'
      } = {} as any,
) {
  return useContractWrite<
    typeof l1RouterABI,
    'removeLiquidityWithPermit',
    TMode
  >({
    abi: l1RouterABI,
    functionName: 'removeLiquidityWithPermit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link l1RouterABI}__.
 */
export function usePrepareL1RouterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof l1RouterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: l1RouterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof l1RouterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link l1RouterABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function usePrepareL1RouterAddLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof l1RouterABI, 'addLiquidity'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: l1RouterABI,
    functionName: 'addLiquidity',
    ...config,
  } as UsePrepareContractWriteConfig<typeof l1RouterABI, 'addLiquidity'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link l1RouterABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function usePrepareL1RouterRemoveLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof l1RouterABI, 'removeLiquidity'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: l1RouterABI,
    functionName: 'removeLiquidity',
    ...config,
  } as UsePrepareContractWriteConfig<typeof l1RouterABI, 'removeLiquidity'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link l1RouterABI}__ and `functionName` set to `"removeLiquidityWithPermit"`.
 */
export function usePrepareL1RouterRemoveLiquidityWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof l1RouterABI,
      'removeLiquidityWithPermit'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: l1RouterABI,
    functionName: 'removeLiquidityWithPermit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof l1RouterABI,
    'removeLiquidityWithPermit'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l2RouterABI}__.
 */
export function useL2RouterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof l2RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l2RouterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: l2RouterABI,
    ...config,
  } as UseContractReadConfig<typeof l2RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l2RouterABI}__ and `functionName` set to `"factory"`.
 */
export function useL2RouterFactory<
  TFunctionName extends 'factory',
  TSelectData = ReadContractResult<typeof l2RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l2RouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: l2RouterABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof l2RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l2RouterABI}__ and `functionName` set to `"getAmountOut"`.
 */
export function useL2RouterGetAmountOut<
  TFunctionName extends 'getAmountOut',
  TSelectData = ReadContractResult<typeof l2RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l2RouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: l2RouterABI,
    functionName: 'getAmountOut',
    ...config,
  } as UseContractReadConfig<typeof l2RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l2RouterABI}__ and `functionName` set to `"getAmountsOut"`.
 */
export function useL2RouterGetAmountsOut<
  TFunctionName extends 'getAmountsOut',
  TSelectData = ReadContractResult<typeof l2RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l2RouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: l2RouterABI,
    functionName: 'getAmountsOut',
    ...config,
  } as UseContractReadConfig<typeof l2RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l2RouterABI}__ and `functionName` set to `"isPair"`.
 */
export function useL2RouterIsPair<
  TFunctionName extends 'isPair',
  TSelectData = ReadContractResult<typeof l2RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l2RouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: l2RouterABI,
    functionName: 'isPair',
    ...config,
  } as UseContractReadConfig<typeof l2RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link l2RouterABI}__ and `functionName` set to `"sortTokens"`.
 */
export function useL2RouterSortTokens<
  TFunctionName extends 'sortTokens',
  TSelectData = ReadContractResult<typeof l2RouterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof l2RouterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: l2RouterABI,
    functionName: 'sortTokens',
    ...config,
  } as UseContractReadConfig<typeof l2RouterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link l2RouterABI}__.
 */
export function useL2RouterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof l2RouterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof l2RouterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof l2RouterABI, TFunctionName, TMode>({
    abi: l2RouterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link l2RouterABI}__ and `functionName` set to `"swapExactTokensForTokens"`.
 */
export function useL2RouterSwapExactTokensForTokens<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof l2RouterABI,
          'swapExactTokensForTokens'
        >['request']['abi'],
        'swapExactTokensForTokens',
        TMode
      > & { functionName?: 'swapExactTokensForTokens' }
    : UseContractWriteConfig<
        typeof l2RouterABI,
        'swapExactTokensForTokens',
        TMode
      > & {
        abi?: never
        functionName?: 'swapExactTokensForTokens'
      } = {} as any,
) {
  return useContractWrite<
    typeof l2RouterABI,
    'swapExactTokensForTokens',
    TMode
  >({
    abi: l2RouterABI,
    functionName: 'swapExactTokensForTokens',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link l2RouterABI}__ and `functionName` set to `"swapExactTokensForTokensSimple"`.
 */
export function useL2RouterSwapExactTokensForTokensSimple<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof l2RouterABI,
          'swapExactTokensForTokensSimple'
        >['request']['abi'],
        'swapExactTokensForTokensSimple',
        TMode
      > & { functionName?: 'swapExactTokensForTokensSimple' }
    : UseContractWriteConfig<
        typeof l2RouterABI,
        'swapExactTokensForTokensSimple',
        TMode
      > & {
        abi?: never
        functionName?: 'swapExactTokensForTokensSimple'
      } = {} as any,
) {
  return useContractWrite<
    typeof l2RouterABI,
    'swapExactTokensForTokensSimple',
    TMode
  >({
    abi: l2RouterABI,
    functionName: 'swapExactTokensForTokensSimple',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link l2RouterABI}__.
 */
export function usePrepareL2RouterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof l2RouterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: l2RouterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof l2RouterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link l2RouterABI}__ and `functionName` set to `"swapExactTokensForTokens"`.
 */
export function usePrepareL2RouterSwapExactTokensForTokens(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof l2RouterABI,
      'swapExactTokensForTokens'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: l2RouterABI,
    functionName: 'swapExactTokensForTokens',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof l2RouterABI,
    'swapExactTokensForTokens'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link l2RouterABI}__ and `functionName` set to `"swapExactTokensForTokensSimple"`.
 */
export function usePrepareL2RouterSwapExactTokensForTokensSimple(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof l2RouterABI,
      'swapExactTokensForTokensSimple'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: l2RouterABI,
    functionName: 'swapExactTokensForTokensSimple',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof l2RouterABI,
    'swapExactTokensForTokensSimple'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__.
 */
export function useDoveRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: doveABI, ...config } as UseContractReadConfig<
    typeof doveABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useDoveDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"allowance"`.
 */
export function useDoveAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useDoveBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"burnClaims"`.
 */
export function useDoveBurnClaims<
  TFunctionName extends 'burnClaims',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'burnClaims',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"claimable0"`.
 */
export function useDoveClaimable0<
  TFunctionName extends 'claimable0',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'claimable0',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"claimable1"`.
 */
export function useDoveClaimable1<
  TFunctionName extends 'claimable1',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'claimable1',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"decimals"`.
 */
export function useDoveDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"factory"`.
 */
export function useDoveFactory<
  TFunctionName extends 'factory',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"feesDistributor"`.
 */
export function useDoveFeesDistributor<
  TFunctionName extends 'feesDistributor',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'feesDistributor',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"fountain"`.
 */
export function useDoveFountain<
  TFunctionName extends 'fountain',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'fountain',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"getReserves"`.
 */
export function useDoveGetReserves<
  TFunctionName extends 'getReserves',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'getReserves',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"hyperlaneGasMaster"`.
 */
export function useDoveHyperlaneGasMaster<
  TFunctionName extends 'hyperlaneGasMaster',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'hyperlaneGasMaster',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"index0"`.
 */
export function useDoveIndex0<
  TFunctionName extends 'index0',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'index0',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"index1"`.
 */
export function useDoveIndex1<
  TFunctionName extends 'index1',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'index1',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"isLiquidityLocked"`.
 */
export function useDoveIsLiquidityLocked<
  TFunctionName extends 'isLiquidityLocked',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'isLiquidityLocked',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"mailbox"`.
 */
export function useDoveMailbox<
  TFunctionName extends 'mailbox',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'mailbox',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"marked"`.
 */
export function useDoveMarked<
  TFunctionName extends 'marked',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'marked',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"name"`.
 */
export function useDoveName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"nonces"`.
 */
export function useDoveNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"owner"`.
 */
export function useDoveOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"reserve0"`.
 */
export function useDoveReserve0<
  TFunctionName extends 'reserve0',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'reserve0',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"reserve1"`.
 */
export function useDoveReserve1<
  TFunctionName extends 'reserve1',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'reserve1',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"sgTrustedBridge"`.
 */
export function useDoveSgTrustedBridge<
  TFunctionName extends 'sgTrustedBridge',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'sgTrustedBridge',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"supplyIndex0"`.
 */
export function useDoveSupplyIndex0<
  TFunctionName extends 'supplyIndex0',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'supplyIndex0',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"supplyIndex1"`.
 */
export function useDoveSupplyIndex1<
  TFunctionName extends 'supplyIndex1',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'supplyIndex1',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"symbol"`.
 */
export function useDoveSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"syncs"`.
 */
export function useDoveSyncs<
  TFunctionName extends 'syncs',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'syncs',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"token0"`.
 */
export function useDoveToken0<
  TFunctionName extends 'token0',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"token1"`.
 */
export function useDoveToken1<
  TFunctionName extends 'token1',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useDoveTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"trustedRemoteLookup"`.
 */
export function useDoveTrustedRemoteLookup<
  TFunctionName extends 'trustedRemoteLookup',
  TSelectData = ReadContractResult<typeof doveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: doveABI,
    functionName: 'trustedRemoteLookup',
    ...config,
  } as UseContractReadConfig<typeof doveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__.
 */
export function useDoveWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof doveABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof doveABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, TFunctionName, TMode>({
    abi: doveABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"addStargateTrustedBridge"`.
 */
export function useDoveAddStargateTrustedBridge<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doveABI,
          'addStargateTrustedBridge'
        >['request']['abi'],
        'addStargateTrustedBridge',
        TMode
      > & { functionName?: 'addStargateTrustedBridge' }
    : UseContractWriteConfig<
        typeof doveABI,
        'addStargateTrustedBridge',
        TMode
      > & {
        abi?: never
        functionName?: 'addStargateTrustedBridge'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'addStargateTrustedBridge', TMode>({
    abi: doveABI,
    functionName: 'addStargateTrustedBridge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"addTrustedRemote"`.
 */
export function useDoveAddTrustedRemote<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doveABI,
          'addTrustedRemote'
        >['request']['abi'],
        'addTrustedRemote',
        TMode
      > & { functionName?: 'addTrustedRemote' }
    : UseContractWriteConfig<typeof doveABI, 'addTrustedRemote', TMode> & {
        abi?: never
        functionName?: 'addTrustedRemote'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'addTrustedRemote', TMode>({
    abi: doveABI,
    functionName: 'addTrustedRemote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"approve"`.
 */
export function useDoveApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof doveABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof doveABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'approve', TMode>({
    abi: doveABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"burn"`.
 */
export function useDoveBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof doveABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof doveABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'burn', TMode>({
    abi: doveABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"claimBurn"`.
 */
export function useDoveClaimBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doveABI,
          'claimBurn'
        >['request']['abi'],
        'claimBurn',
        TMode
      > & { functionName?: 'claimBurn' }
    : UseContractWriteConfig<typeof doveABI, 'claimBurn', TMode> & {
        abi?: never
        functionName?: 'claimBurn'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'claimBurn', TMode>({
    abi: doveABI,
    functionName: 'claimBurn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"claimFeesFor"`.
 */
export function useDoveClaimFeesFor<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doveABI,
          'claimFeesFor'
        >['request']['abi'],
        'claimFeesFor',
        TMode
      > & { functionName?: 'claimFeesFor' }
    : UseContractWriteConfig<typeof doveABI, 'claimFeesFor', TMode> & {
        abi?: never
        functionName?: 'claimFeesFor'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'claimFeesFor', TMode>({
    abi: doveABI,
    functionName: 'claimFeesFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"finalizeSyncFromL2"`.
 */
export function useDoveFinalizeSyncFromL2<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doveABI,
          'finalizeSyncFromL2'
        >['request']['abi'],
        'finalizeSyncFromL2',
        TMode
      > & { functionName?: 'finalizeSyncFromL2' }
    : UseContractWriteConfig<typeof doveABI, 'finalizeSyncFromL2', TMode> & {
        abi?: never
        functionName?: 'finalizeSyncFromL2'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'finalizeSyncFromL2', TMode>({
    abi: doveABI,
    functionName: 'finalizeSyncFromL2',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"handle"`.
 */
export function useDoveHandle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof doveABI, 'handle'>['request']['abi'],
        'handle',
        TMode
      > & { functionName?: 'handle' }
    : UseContractWriteConfig<typeof doveABI, 'handle', TMode> & {
        abi?: never
        functionName?: 'handle'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'handle', TMode>({
    abi: doveABI,
    functionName: 'handle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"mint"`.
 */
export function useDoveMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof doveABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof doveABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'mint', TMode>({
    abi: doveABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"permit"`.
 */
export function useDovePermit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof doveABI, 'permit'>['request']['abi'],
        'permit',
        TMode
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<typeof doveABI, 'permit', TMode> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'permit', TMode>({
    abi: doveABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"setHyperlaneGasMaster"`.
 */
export function useDoveSetHyperlaneGasMaster<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doveABI,
          'setHyperlaneGasMaster'
        >['request']['abi'],
        'setHyperlaneGasMaster',
        TMode
      > & { functionName?: 'setHyperlaneGasMaster' }
    : UseContractWriteConfig<typeof doveABI, 'setHyperlaneGasMaster', TMode> & {
        abi?: never
        functionName?: 'setHyperlaneGasMaster'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'setHyperlaneGasMaster', TMode>({
    abi: doveABI,
    functionName: 'setHyperlaneGasMaster',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"setMailbox"`.
 */
export function useDoveSetMailbox<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doveABI,
          'setMailbox'
        >['request']['abi'],
        'setMailbox',
        TMode
      > & { functionName?: 'setMailbox' }
    : UseContractWriteConfig<typeof doveABI, 'setMailbox', TMode> & {
        abi?: never
        functionName?: 'setMailbox'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'setMailbox', TMode>({
    abi: doveABI,
    functionName: 'setMailbox',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"sgReceive"`.
 */
export function useDoveSgReceive<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doveABI,
          'sgReceive'
        >['request']['abi'],
        'sgReceive',
        TMode
      > & { functionName?: 'sgReceive' }
    : UseContractWriteConfig<typeof doveABI, 'sgReceive', TMode> & {
        abi?: never
        functionName?: 'sgReceive'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'sgReceive', TMode>({
    abi: doveABI,
    functionName: 'sgReceive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"sync"`.
 */
export function useDoveSync<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof doveABI, 'sync'>['request']['abi'],
        'sync',
        TMode
      > & { functionName?: 'sync' }
    : UseContractWriteConfig<typeof doveABI, 'sync', TMode> & {
        abi?: never
        functionName?: 'sync'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'sync', TMode>({
    abi: doveABI,
    functionName: 'sync',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"syncL2"`.
 */
export function useDoveSyncL2<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof doveABI, 'syncL2'>['request']['abi'],
        'syncL2',
        TMode
      > & { functionName?: 'syncL2' }
    : UseContractWriteConfig<typeof doveABI, 'syncL2', TMode> & {
        abi?: never
        functionName?: 'syncL2'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'syncL2', TMode>({
    abi: doveABI,
    functionName: 'syncL2',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"transfer"`.
 */
export function useDoveTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doveABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof doveABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'transfer', TMode>({
    abi: doveABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useDoveTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doveABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof doveABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'transferFrom', TMode>({
    abi: doveABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useDoveTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doveABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof doveABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof doveABI, 'transferOwnership', TMode>({
    abi: doveABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__.
 */
export function usePrepareDoveWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"addStargateTrustedBridge"`.
 */
export function usePrepareDoveAddStargateTrustedBridge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'addStargateTrustedBridge'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'addStargateTrustedBridge',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof doveABI,
    'addStargateTrustedBridge'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"addTrustedRemote"`.
 */
export function usePrepareDoveAddTrustedRemote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'addTrustedRemote'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'addTrustedRemote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'addTrustedRemote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareDoveApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareDoveBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"claimBurn"`.
 */
export function usePrepareDoveClaimBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'claimBurn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'claimBurn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'claimBurn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"claimFeesFor"`.
 */
export function usePrepareDoveClaimFeesFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'claimFeesFor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'claimFeesFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'claimFeesFor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"finalizeSyncFromL2"`.
 */
export function usePrepareDoveFinalizeSyncFromL2(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'finalizeSyncFromL2'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'finalizeSyncFromL2',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'finalizeSyncFromL2'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"handle"`.
 */
export function usePrepareDoveHandle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'handle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'handle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'handle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareDoveMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareDovePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"setHyperlaneGasMaster"`.
 */
export function usePrepareDoveSetHyperlaneGasMaster(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'setHyperlaneGasMaster'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'setHyperlaneGasMaster',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'setHyperlaneGasMaster'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"setMailbox"`.
 */
export function usePrepareDoveSetMailbox(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'setMailbox'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'setMailbox',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'setMailbox'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"sgReceive"`.
 */
export function usePrepareDoveSgReceive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'sgReceive'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'sgReceive',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'sgReceive'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"sync"`.
 */
export function usePrepareDoveSync(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'sync'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'sync',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'sync'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"syncL2"`.
 */
export function usePrepareDoveSyncL2(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'syncL2'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'syncL2',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'syncL2'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareDoveTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareDoveTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doveABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareDoveTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doveABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: doveABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doveABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__.
 */
export function useDoveEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof doveABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: doveABI, ...config } as UseContractEventConfig<
    typeof doveABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"Approval"`.
 */
export function useDoveApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"Bridged"`.
 */
export function useDoveBridgedEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'Bridged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'Bridged',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'Bridged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"Burn"`.
 */
export function useDoveBurnEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'Burn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'Burn',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'Burn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"BurnClaimCreated"`.
 */
export function useDoveBurnClaimCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'BurnClaimCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'BurnClaimCreated',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'BurnClaimCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"BurnClaimed"`.
 */
export function useDoveBurnClaimedEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'BurnClaimed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'BurnClaimed',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'BurnClaimed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"Claim"`.
 */
export function useDoveClaimEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'Claim'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'Claim',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'Claim'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"Fees"`.
 */
export function useDoveFeesEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'Fees'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'Fees',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'Fees'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"FeesTransferred"`.
 */
export function useDoveFeesTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'FeesTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'FeesTransferred',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'FeesTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"FeesUpdated"`.
 */
export function useDoveFeesUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'FeesUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'FeesUpdated',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'FeesUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"Mint"`.
 */
export function useDoveMintEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'Mint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'Mint',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'Mint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useDoveOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"SyncFinalized"`.
 */
export function useDoveSyncFinalizedEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'SyncFinalized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'SyncFinalized',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'SyncFinalized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"SyncPending"`.
 */
export function useDoveSyncPendingEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'SyncPending'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'SyncPending',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'SyncPending'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"Transfer"`.
 */
export function useDoveTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doveABI}__ and `eventName` set to `"Updated"`.
 */
export function useDoveUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof doveABI, 'Updated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: doveABI,
    eventName: 'Updated',
    ...config,
  } as UseContractEventConfig<typeof doveABI, 'Updated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__.
 */
export function usePairRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: pairABI, ...config } as UseContractReadConfig<
    typeof pairABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"L1Target"`.
 */
export function usePairL1Target<
  TFunctionName extends 'L1Target',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'L1Target',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"L1Token0"`.
 */
export function usePairL1Token0<
  TFunctionName extends 'L1Token0',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'L1Token0',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"L1Token1"`.
 */
export function usePairL1Token1<
  TFunctionName extends 'L1Token1',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'L1Token1',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"balance0"`.
 */
export function usePairBalance0<
  TFunctionName extends 'balance0',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'balance0',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"balance1"`.
 */
export function usePairBalance1<
  TFunctionName extends 'balance1',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'balance1',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"blockTimestampLast"`.
 */
export function usePairBlockTimestampLast<
  TFunctionName extends 'blockTimestampLast',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'blockTimestampLast',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"currentCumulativePrices"`.
 */
export function usePairCurrentCumulativePrices<
  TFunctionName extends 'currentCumulativePrices',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'currentCumulativePrices',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"factory"`.
 */
export function usePairFactory<
  TFunctionName extends 'factory',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"feesAccumulator"`.
 */
export function usePairFeesAccumulator<
  TFunctionName extends 'feesAccumulator',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'feesAccumulator',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"getAmountOut"`.
 */
export function usePairGetAmountOut<
  TFunctionName extends 'getAmountOut',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'getAmountOut',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"getReserves"`.
 */
export function usePairGetReserves<
  TFunctionName extends 'getReserves',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'getReserves',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"getSyncerPercentage"`.
 */
export function usePairGetSyncerPercentage<
  TFunctionName extends 'getSyncerPercentage',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'getSyncerPercentage',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"hyperlaneGasMaster"`.
 */
export function usePairHyperlaneGasMaster<
  TFunctionName extends 'hyperlaneGasMaster',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'hyperlaneGasMaster',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"mailbox"`.
 */
export function usePairMailbox<
  TFunctionName extends 'mailbox',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'mailbox',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"owner"`.
 */
export function usePairOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"reserve0"`.
 */
export function usePairReserve0<
  TFunctionName extends 'reserve0',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'reserve0',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"reserve0CumulativeLast"`.
 */
export function usePairReserve0CumulativeLast<
  TFunctionName extends 'reserve0CumulativeLast',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'reserve0CumulativeLast',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"reserve1"`.
 */
export function usePairReserve1<
  TFunctionName extends 'reserve1',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'reserve1',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"reserve1CumulativeLast"`.
 */
export function usePairReserve1CumulativeLast<
  TFunctionName extends 'reserve1CumulativeLast',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'reserve1CumulativeLast',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"token0"`.
 */
export function usePairToken0<
  TFunctionName extends 'token0',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"token1"`.
 */
export function usePairToken1<
  TFunctionName extends 'token1',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"voucher0"`.
 */
export function usePairVoucher0<
  TFunctionName extends 'voucher0',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'voucher0',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"voucher1"`.
 */
export function usePairVoucher1<
  TFunctionName extends 'voucher1',
  TSelectData = ReadContractResult<typeof pairABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'voucher1',
    ...config,
  } as UseContractReadConfig<typeof pairABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__.
 */
export function usePairWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pairABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof pairABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof pairABI, TFunctionName, TMode>({
    abi: pairABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"burnVouchers"`.
 */
export function usePairBurnVouchers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairABI,
          'burnVouchers'
        >['request']['abi'],
        'burnVouchers',
        TMode
      > & { functionName?: 'burnVouchers' }
    : UseContractWriteConfig<typeof pairABI, 'burnVouchers', TMode> & {
        abi?: never
        functionName?: 'burnVouchers'
      } = {} as any,
) {
  return useContractWrite<typeof pairABI, 'burnVouchers', TMode>({
    abi: pairABI,
    functionName: 'burnVouchers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"handle"`.
 */
export function usePairHandle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pairABI, 'handle'>['request']['abi'],
        'handle',
        TMode
      > & { functionName?: 'handle' }
    : UseContractWriteConfig<typeof pairABI, 'handle', TMode> & {
        abi?: never
        functionName?: 'handle'
      } = {} as any,
) {
  return useContractWrite<typeof pairABI, 'handle', TMode>({
    abi: pairABI,
    functionName: 'handle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"setHyperlaneGasMaster"`.
 */
export function usePairSetHyperlaneGasMaster<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairABI,
          'setHyperlaneGasMaster'
        >['request']['abi'],
        'setHyperlaneGasMaster',
        TMode
      > & { functionName?: 'setHyperlaneGasMaster' }
    : UseContractWriteConfig<typeof pairABI, 'setHyperlaneGasMaster', TMode> & {
        abi?: never
        functionName?: 'setHyperlaneGasMaster'
      } = {} as any,
) {
  return useContractWrite<typeof pairABI, 'setHyperlaneGasMaster', TMode>({
    abi: pairABI,
    functionName: 'setHyperlaneGasMaster',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"setMailbox"`.
 */
export function usePairSetMailbox<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairABI,
          'setMailbox'
        >['request']['abi'],
        'setMailbox',
        TMode
      > & { functionName?: 'setMailbox' }
    : UseContractWriteConfig<typeof pairABI, 'setMailbox', TMode> & {
        abi?: never
        functionName?: 'setMailbox'
      } = {} as any,
) {
  return useContractWrite<typeof pairABI, 'setMailbox', TMode>({
    abi: pairABI,
    functionName: 'setMailbox',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"swap"`.
 */
export function usePairSwap<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pairABI, 'swap'>['request']['abi'],
        'swap',
        TMode
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<typeof pairABI, 'swap', TMode> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<typeof pairABI, 'swap', TMode>({
    abi: pairABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"sync"`.
 */
export function usePairSync<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof pairABI, 'sync'>['request']['abi'],
        'sync',
        TMode
      > & { functionName?: 'sync' }
    : UseContractWriteConfig<typeof pairABI, 'sync', TMode> & {
        abi?: never
        functionName?: 'sync'
      } = {} as any,
) {
  return useContractWrite<typeof pairABI, 'sync', TMode>({
    abi: pairABI,
    functionName: 'sync',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"syncToL1"`.
 */
export function usePairSyncToL1<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairABI,
          'syncToL1'
        >['request']['abi'],
        'syncToL1',
        TMode
      > & { functionName?: 'syncToL1' }
    : UseContractWriteConfig<typeof pairABI, 'syncToL1', TMode> & {
        abi?: never
        functionName?: 'syncToL1'
      } = {} as any,
) {
  return useContractWrite<typeof pairABI, 'syncToL1', TMode>({
    abi: pairABI,
    functionName: 'syncToL1',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePairTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof pairABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof pairABI, 'transferOwnership', TMode>({
    abi: pairABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"yeetVouchers"`.
 */
export function usePairYeetVouchers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof pairABI,
          'yeetVouchers'
        >['request']['abi'],
        'yeetVouchers',
        TMode
      > & { functionName?: 'yeetVouchers' }
    : UseContractWriteConfig<typeof pairABI, 'yeetVouchers', TMode> & {
        abi?: never
        functionName?: 'yeetVouchers'
      } = {} as any,
) {
  return useContractWrite<typeof pairABI, 'yeetVouchers', TMode>({
    abi: pairABI,
    functionName: 'yeetVouchers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__.
 */
export function usePreparePairWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"burnVouchers"`.
 */
export function usePreparePairBurnVouchers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'burnVouchers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'burnVouchers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'burnVouchers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"handle"`.
 */
export function usePreparePairHandle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'handle'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'handle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'handle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"setHyperlaneGasMaster"`.
 */
export function usePreparePairSetHyperlaneGasMaster(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'setHyperlaneGasMaster'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'setHyperlaneGasMaster',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'setHyperlaneGasMaster'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"setMailbox"`.
 */
export function usePreparePairSetMailbox(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'setMailbox'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'setMailbox',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'setMailbox'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"swap"`.
 */
export function usePreparePairSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'swap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"sync"`.
 */
export function usePreparePairSync(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'sync'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'sync',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'sync'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"syncToL1"`.
 */
export function usePreparePairSyncToL1(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'syncToL1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'syncToL1',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'syncToL1'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePairTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"yeetVouchers"`.
 */
export function usePreparePairYeetVouchers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'yeetVouchers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'yeetVouchers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'yeetVouchers'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__.
 */
export function usePairEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pairABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: pairABI, ...config } as UseContractEventConfig<
    typeof pairABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePairOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"Swap"`.
 */
export function usePairSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"Sync"`.
 */
export function usePairSyncEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'Sync'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'Sync',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'Sync'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"SyncToL1Initiated"`.
 */
export function usePairSyncToL1InitiatedEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'SyncToL1Initiated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'SyncToL1Initiated',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'SyncToL1Initiated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"SyncedFromL1"`.
 */
export function usePairSyncedFromL1Event(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'SyncedFromL1'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'SyncedFromL1',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'SyncedFromL1'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"VouchersBurnInitiated"`.
 */
export function usePairVouchersBurnInitiatedEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'VouchersBurnInitiated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'VouchersBurnInitiated',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'VouchersBurnInitiated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"VouchersYeeted"`.
 */
export function usePairVouchersYeetedEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'VouchersYeeted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'VouchersYeeted',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'VouchersYeeted'>)
}
